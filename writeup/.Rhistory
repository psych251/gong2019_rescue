donation=c(donation, "money")
kinship=c(kinship, "nonrel")
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_money_nonrel$soc_dist,
amount = d_money_nonrel$med_amnt))
}
opt2=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
V_values=c(V_values,opt2$par[1])
k_values=c(k_values, opt2$par[2])
RMSE=c(RMSE, opt2$value)
d_money_nonrel$pred=discount(V = opt2$par[1], k = opt2$par[2],N = d_money_nonrel$soc_dist)
cor2=cor.test(d_money_nonrel$med_amnt, d_money_nonrel$pred)
R_sq=c(R_sq, (cor2$estimate)^2)
d_time_rel=d%>%filter(age_group==i, donation=="time", kinship=="rel")
age_group=c(age_group,i)
donation=c(donation, "time")
kinship=c(kinship, "rel")
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_time_rel$soc_dist,
amount = d_time_rel$med_amnt))
}
opt3=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
V_values=c(V_values,opt3$par[1])
k_values=c(k_values, opt3$par[2])
RMSE=c(RMSE, opt3$value)
d_time_rel$pred=discount(V = opt3$par[1], k = opt3$par[2],N = d_time_rel$soc_dist)
cor3=cor.test(d_time_rel$med_amnt, d_time_rel$pred)
R_sq=c(R_sq, (cor3$estimate)^2)
d_time_nonrel=d%>%filter(age_group==i, donation=="time", kinship=="nonrel")
age_group=c(age_group,i)
donation=c(donation, "time")
kinship=c(kinship, "nonrel")
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_time_nonrel$soc_dist,
amount = d_time_nonrel$med_amnt))
}
opt4=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
V_values=c(V_values,opt4$par[1])
k_values=c(k_values, opt4$par[2])
RMSE=c(RMSE, opt4$value)
d_time_nonrel$pred=discount(V = opt4$par[1], k = opt4$par[2],N = d_time_nonrel$soc_dist)
cor4=cor.test(d_time_nonrel$med_amnt, d_time_nonrel$pred)
R_sq=c(R_sq, (cor4$estimate)^2)
}
#Add all vectors to one dataset
med_smry=as.data.frame(cbind(`Age group`=age_group, Donation=donation, Kinship=kinship, V=V_values, k=k_values, `R sqr`=R_sq, RMSE), row.names = F)%>%mutate(V=as.character(V), k=as.character(k), `R sqr`=as.character(`R sqr`), RMSE=as.character(RMSE))%>%mutate(V=as.numeric(V), k=as.numeric(k), `R sqr`=as.numeric(`R sqr`), RMSE=as.numeric(RMSE))
kable(med_smry, digits = 2, align = "c", caption = "Estimated Parameters and Goodness-of-fit Indices of the Hyperbolic Functions, group median values")
#Create the empty dataframe, in which each participant have 4 rows
df2=as.data.frame(cbind(
id=rep(unique(og_lng2$id),4),
age_group=c(),
gender=c(),
education=c(),
income=c(),
important_friends=c(),
important_family=c(),
ethnicity=c(),
kinship=c(),
donation=c(),
k=c(),
AUC=c()
))
#Fill in values for demographics (age, age group, gender, education, income, number of important family and friends)
for (i in unique(df2$id)){
df_sub=filter(df_og2, id==i)
df2[df2$id==i, 'age']=df_sub$age
df2[df2$id==i, 'age_group']=df_sub$age_group
df2[df2$id==i, 'gender']=df_sub$gender
df2[df2$id==i, 'education']=df_sub$education
df2[df2$id==i, 'income']=df_sub$income
df2[df2$id==i, 'important_friends']=df_sub$important_friends
df2[df2$id==i, 'important_family']=df_sub$important_family
df2[df2$id==i, 'ethnicity']=df_sub$ethnicity
}
df2=as.data.frame(cbind(
id=rep(unique(og_lng2$id),4),
age_group=c(),
gender=c(),
education=c(),
income=c(),
important_friends=c(),
important_family=c(),
ethnicity=c(),
kinship=c(),
donation=c(),
k=c(),
AUC=c()
))
#Fill in values for demographics
for (i in unique(df2$id)){
df_sub=filter(df_og2, id==i)
df2[df2$id==i, 'age']=df_sub$age
df2[df2$id==i, 'age_group']=df_sub$age_group
df2[df2$id==i, 'gender']=df_sub$gender
df2[df2$id==i, 'education']=df_sub$education
df2[df2$id==i, 'income']=df_sub$income
df2[df2$id==i, 'important_friends']=df_sub$important_friends
df2[df2$id==i, 'important_family']=df_sub$important_family
df2[df2$id==i, 'ethnicity']=df_sub$ethnicity
}
#for each individual, extract values for donation * kinship conditions
#set variable soc_dist in og_lng2 to be numeric
og_lng2$soc_dist=as.character(og_lng2$soc_dist)
og_lng2$soc_dist=as.numeric(og_lng2$soc_dist)
is.numeric(og_lng2$soc_dist)
#Get length of number of participants (n) as value
n_p=length(unique(df2$id))
#Create 4 temporary df's to store values from each iteration
df2_mr=df2[1:n_p,] #-> for money_relative
df2_mnr=df2[(n_p+1):(n_p*2),] #->for money_nonrelative
df2_tr=df2[(2*n_p+1):(n_p*3),] #->for time_relative
df2_tnr=df2[(3*n_p+1):(n_p*4),] #->for time_nonrel
#run discount wrapper for each subject in 2*2 conditions
for(i in unique(df2$id)){
#money relative
d_mon_rel=og_lng2%>%filter(id==i, donation=="money", kinship=="rel") #-> create temp df to get values from
df2_mr[df2_mr$id==i, 'donation']="money" #-> store the appropriate donation
df2_mr[df2_mr$id==i, 'kinship']="rel" #-> store the appropriate kinship
optim_discount_wrapper <- function(x) { #-> define discount wrapper to get V, k, and RMSE values for this                                                      condition
return(data_vs_discount(V = x[1], k = x[2],
N = d_mon_rel$soc_dist,
amount = d_mon_rel$amount))
}
opt1=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100)) #-> run discount_wrapper
df2_mr[df2_mr$id==i, 'k']=opt1$par[2] #-> store resulting k_value
df2_mr[df2_mr$id==i, 'V']=opt1$par[1] #-> store resulting V_value
# Get AUC value - using WolframAlpha, the integral of this discount function is:
# V/k*ln(abs(1+k*n))+c -> we don't really care about c for AUC.
k=opt1$par[2]
V=opt1$par[1]
#Evaluate for upper bound
up=V/k*log(abs(1+k*100))
lower=V/k*log(abs(1+k*0))
df2_mr[df2_mr$id==i,'AUC']=up-lower
#money nonrelative
d_mon_nonrel=og_lng2%>%filter(id==i, donation=="money", kinship=="nonrel")
df2_mnr[df2_mnr$id==i, 'donation']="money"
df2_mnr[df2_mnr$id==i, 'kinship']="nonrel"
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_mon_nonrel$soc_dist,
amount = d_mon_nonrel$amount))
}
opt2=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
df2_mnr[df2_mnr$id==i, 'k']=opt2$par[2]
df2_mnr[df2_mnr$id==i, 'V']=opt2$par[1]
# Get AUC value
k=opt2$par[2]
V=opt2$par[1]
#Evaluate for upper bound
up=V/k*log(abs(1+k*100))
lower=V/k*log(abs(1+k*0))
df2_mnr[df2_mnr$id==i,'AUC']=up-lower
#time relative
d_time_rel=og_lng2%>%filter(id==i, donation=="time", kinship=="rel")
df2_tr[df2_tr$id==i, 'donation']="time"
df2_tr[df2_tr$id==i, 'kinship']="rel"
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_time_rel$soc_dist,
amount = d_time_rel$amount))
}
opt3=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
df2_tr[df2_tr$id==i, 'k']=opt3$par[2]
df2_tr[df2_tr$id==i, 'V']=opt3$par[1]
# Get AUC value
k=opt3$par[2]
V=opt3$par[1]
#Evaluate for upper bound
up=V/k*log(abs(1+k*100))
lower=V/k*log(abs(1+k*0))
df2_tr[df2_tr$id==i,'AUC']=up-lower
#time nonrelative
d_time_nonrel=og_lng2%>%filter(id==i, donation=="time", kinship=="nonrel")
df2_tnr[df2_tnr$id==i, 'donation']="time"
df2_tnr[df2_tnr$id==i, 'kinship']="nonrel"
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_time_nonrel$soc_dist,
amount = d_time_nonrel$amount))
}
opt4=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
df2_tnr[df2_tnr$id==i, 'k']=opt4$par[2]
df2_tnr[df2_tnr$id==i, 'V']=opt4$par[1]
# Get AUC value
k=opt4$par[2]
V=opt4$par[1]
#Evaluate for upper bound
up=V/k*log(abs(1+k*100))
lower=V/k*log(abs(1+k*0))
df2_tnr[df2_tnr$id==i,'AUC']=up-lower
}
#Combine all into one dataframe (df2)
df2=full_join(df2_mr, df2_mnr)%>%full_join(df2_tr)%>%full_join(df2_tnr)
df2_plot_pred=df2
#recode all NaN AUC values as missing data (NA)
for(i in 1:length(df2$id)){
if(is.nan(df2$AUC[i])){df2$AUC[i]=NA}else{df2$AUC[i]=df2$AUC[i]}
}
#Negative or zero AUC or k values (indicating a problem with the fitting process)
df2$AUC=recode(df2$AUC, "lo:0.01=NA")
df2$k=recode(df2$k, "lo:0.01=NA")
#check if AUC is normally distributed
AUc_hist=ggplot(data=df2, aes(x=AUC))+geom_histogram() #-> strong positive skew
logAUC_hist=ggplot(data = df2, aes(x=log(AUC)))+geom_histogram() #-> looks better
#check if k is normally distributed
k_hist=ggplot(data=df2, aes(x=k))+geom_histogram() #-> strong positive skew
log_k_hist=ggplot(data = df2, aes(x=log(k)))+geom_histogram() #-> looks better
#Since Gong et al., used log(AUC) and log(k) for their analysis, I shall do the same
df2$logAUC=log(df2$AUC)
df2$log_k=log(df2$k)
#compute +/- 3 S.D for logAUC and log_k values
logAUC_hi=mean(df2$logAUC, na.rm=T)+(3*sd(df2$logAUC, na.rm = T))
logAUC_lo=mean(df2$logAUC, na.rm=T)-(3*sd(df2$logAUC, na.rm = T))
log_k_hi=mean(df2$log_k, na.rm=T)+(3*sd(df2$logAUC, na.rm = T))
log_k_lo=mean(df2$log_k, na.rm=T)-(3*sd(df2$logAUC, na.rm = T))
#df2=df2%>%filter(k<=(mean(k)+3*sd(k)) & k>=(mean(k)-3*sd(k)) & AUC<=(mean(AUC)+3*sd(AUC))& AUC>=(mean(AUC)-3*sd(AUC))) #-> retain only observations that meet criteria
#recode all observations outside of the +/- 3 S.D range as missing values
df2$logAUC[df2$logAUC<logAUC_lo]=NA
df2$logAUC[df2$logAUC>logAUC_hi]=NA
df2$log_k[df2$log_k<log_k_lo]=NA
df2$log_k[df2$log_k>log_k_hi]=NA
#check that the minimal values are not lower than k and AUC "_low"'s, and maximal not higher than "_high"'s
min(df2$log_k, na.rm = T)<log_k_lo; max(df2$log_k,na.rm = T)>log_k_hi; min(df2$logAUC,na.rm = T)<logAUC_lo; max(df2$logAUC,na.rm = T)>logAUC_hi
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_AUC <- na.omit(df2_noNA_AUC)
df2_noNA_k=df2%>%filter(na_k_counts==0)
df2_noNA_k <- na.omit(df2_noNA_k)
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
View(df2_noNA_AUC)
View(df2_noNA_AUC)
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_k=df2%>%filter(na_k_counts==0)
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_AUC1$ANOVA)
#AUC with covariates
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
#k value without covariates
anova_k1=ezANOVA(data = df2_noNA_k, wid=.(id), dv=na.omit(log_k), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_k1$ANOVA)
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC <- df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC <- df2%>%filter(naAUC_counts==0)
df2_noNA_k <- df2%>%filter(na_k_counts==0)
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_AUC1$ANOVA)
#AUC with covariates
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_k=df2%>%filter(na_k_counts==0)
View(df2_noNA_AUC)
#AUC with covariates
df2_noNA_AUC <- na.omit(df2_noNA_AUC)
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_k=df2%>%filter(na_k_counts==0)
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_AUC1$ANOVA)
#AUC with covariates
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
#AUC with covariates
df2_noNA_AUC <- na.omit(df2_noNA_AUC[, c("logAUC", "important_family", "donation", "kinship", "age_group", "gender")])
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_k=df2%>%filter(na_k_counts==0)
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_AUC1$ANOVA)
#AUC with covariates
df2_noNA_AUC <- na.omit(df2_noNA_AUC[, c("id", "logAUC", "important_family", "donation", "kinship", "age_group", "gender")])
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_k=df2%>%filter(na_k_counts==0)
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_AUC1$ANOVA)
#AUC with covariates
df2_noNA_AUC <- na.omit(df2_noNA_AUC[, c("id", "logAUC", "important_family", "important_friends" "donation", "kinship", "age_group", "gender")])
#AUC with covariates
df2_noNA_AUC <- na.omit(df2_noNA_AUC[, c("id", "logAUC", "important_family", "important_friends", "donation", "kinship", "age_group", "gender")])
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
kable(anova_AUC2$ANOVA)
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_k=df2%>%filter(na_k_counts==0)
#preparing the datasets for ANOVA by removing missing values
df2_noNA_AUC <- na.omit(df2_noNA_AUC[, c("id", "logAUC", "important_family", "important_friends", "donation", "kinship", "age_group", "gender")])
df2_noNA_k <- na.omit(df2_noNA_k[, c("id", "logAUC", "important_family", "important_friends", "donation", "kinship", "age_group", "gender")])
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_AUC1$ANOVA)
#AUC with covariates
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
kable(anova_AUC2$ANOVA)
#k value without covariates
anova_k1=ezANOVA(data = df2_noNA_k, wid=.(id), dv=na.omit(log_k), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_k=df2%>%filter(na_k_counts==0)
#preparing the datasets for ANOVA by removing missing values
df2_noNA_AUC <- na.omit(df2_noNA_AUC[, c("id", "logAUC", "important_family", "important_friends", "donation", "kinship", "age_group", "gender")])
df2_noNA_k <- na.omit(df2_noNA_k[, c("id", "log_k", "important_family", "important_friends", "donation", "kinship", "age_group", "gender")])
#AUC without covariates
anova_AUC1=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_AUC1$ANOVA)
#AUC with covariates
anova_AUC2=ezANOVA(data = df2_noNA_AUC, wid=.(id), dv=na.omit(logAUC), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
kable(anova_AUC2$ANOVA)
#k value without covariates
anova_k1=ezANOVA(data = df2_noNA_k, wid=.(id), dv=na.omit(log_k), within  = .(donation, kinship), between = .(age_group), type = 3, observed = .(age_group))
kable(anova_k1$ANOVA)
#AUC with covariates
anova_k2=ezANOVA(data = df2_noNA_k, wid=.(id), dv=na.omit(log_k), within  = .(donation, kinship), between = .(age_group), between_covariates = .(gender, important_family, important_friends) ,type = 3, observed = .(age_group))
kable(anova_k2$ANOVA)
