education_table <- table(df$education, df$age_group)
barplot(education_table, beside = TRUE,
legend = c("Middle school", "High school", "Some college", "Bachelor's degree", "Graduate degree"),
main = "Education x Age", xlab = "Age Group", ylab = "Count")
t.test(education ~ age_group, data = df) #not significantly different
income_table <- table(df$income, df$age_group)
barplot(income_table, beside = TRUE,
legend = c("0-30k", "30-60k", "60-90k", "90-120k", "120-150k", "150k+"),
main = "Income x Age", xlab = "Age Group", ylab = "Count")
t.test(income ~ age_group, data = df) #not significantly different
income_table <- table(df$important_friends, df$age_group)
barplot(income_table, beside = TRUE,
main = "Income x Age", xlab = "Age Group", ylab = "Count")
t.test(important_friends ~ age_group, data = df) #not significantly different
income_table <- table(df$important_family, df$age_group)
barplot(income_table, beside = TRUE,
main = "Income x Age", xlab = "Age Group", ylab = "Count")
t.test(important_family ~ age_group, data = df) #not significantly different
income_table <- table(df$easeM, df$age_group)
barplot(income_table, beside = TRUE,
main = "Income x Age", xlab = "Age Group", ylab = "Count")
t.test(easeM ~ age_group, data = df) #not significantly different
income_table <- table(df$easeT, df$age_group)
barplot(income_table, beside = TRUE,
main = "Ease of getting time off x Age", xlab = "Age Group", ylab = "Count")
t.test(easeT ~ age_group, data = df) #not significantly different
df <- as.numeric(df, easeM, easeT, MorT)
df <- as.numeric(df$easeM, df$easeT, df$MorT)
discount <- function (V, k, N) {
nu <- V / (1 + k * N)
return(nu)
}
library(knitr)
library(tidyverse)
library(ggplot2)
library(car)
library(ez)
library(broom)
library(pander)
library(kableExtra)
library(lme4)
library(lmerTest)
library(effsize)
library(RColorBrewer)
library(grid)
library(gridExtra)
library(imager)
library(metafor)
theme_set(theme_bw())
discount <- function (V, k, N) {
nu <- V / (1 + k * N)
return(nu)
}
data_vs_discount <- function(V, k, N, amount) {
nu <- discount(V, k, N)
RMSE <- sqrt(mean((amount - nu)^2))
return(RMSE)
}
df = read.csv("psych251_final_data.csv", header=T)
df <- tail(df, -2)
df = select(df, -2:-17, -59)
df$id <- 1:182 #changed to reflect final number of participants
df = filter(df, attention_check==5)
df = filter(df, gender_5_TEXT!="I AM YOUR TA PLEASE EXCLUDE ME")
df <- df %>%
mutate(StartDate = as.POSIXct(StartDate, format = "%Y-%m-%d %H:%M:%S")) %>%
filter(StartDate >= as.POSIXct("2023-12-07 15:57:46", format = "%Y-%m-%d %H:%M:%S")) #filtering out pilot participants
df <- df %>% filter(ethnicity ==2)
View(df)
df[,c(1:40)]=as.numeric(unlist(df[,c(1:40)]))
df <- filter(df, complete.cases(rel_1_money, rel_1_time, rel_2_money, rel_2_time, rel_5_money, rel_5_time, rel_10_money, rel_10_time, rel_20_money, rel_20_time, rel_50_money, rel_50_time, rel_100_money, rel_100_time, nonrel_1_money, nonrel_1_time, nonrel_2_money, nonrel_2_time, nonrel_5_money, nonrel_5_time, nonrel_10_money, nonrel_10_time, nonrel_20_money, nonrel_20_time, nonrel_50_money, nonrel_50_time, nonrel_100_money, nonrel_100_time, gender, education, income, important_friends, important_family))
df <- df%>%
mutate(age_group = dplyr::case_when(age <= 44 ~ "younger", age > 49 ~ "older"),
age_group = factor(age_group, level = c("younger", "older"))
)
#remove participants who do not fall into designated age groups or who didn't enter an age
df <- df %>% filter(!is.na(age_group))
summary(df$age_group)
demos <- df %>%
group_by(age_group) %>%
summarise(
mean_age = mean(age),
range_age = paste(min(age), "-", max(age))
)
df <- df %>%
mutate(easeM = ease_money, easeT = ease_time, MorT = money_or_time) %>%
select(-ease_money, -ease_time, -money_or_time)
as.numeric(df$easeM, df$easeT, df$MorT)
og_lng=df%>%
gather(condition, amount, c(matches("_money"),matches("_time"))
)%>%
separate(condition, c("kin", "soc_dist", "donation"), "_")%>%
spread(kin, amount)%>%
gather(kinship, amount,
rel, nonrel)
og_lng=df%>%
gather(condition, amount, c(matches("_money"),matches("_time"))
)%>%
separate(condition, c("kin", "soc_dist", "donation"), "_")%>%
spread(kin, amount)%>%
gather(kinship, amount,
rel, nonrel)
#create df with monetary amounts divided by 1000 for plotting and analyses (to have the same units for time and money donations)
df_og2=df%>%mutate(rel_1_money=rel_1_money/1000,
rel_2_money=rel_2_money/1000,
rel_5_money=rel_5_money/1000,
rel_10_money=rel_10_money/1000,
rel_20_money=rel_20_money/1000,
rel_50_money=rel_50_money/1000,
rel_100_money=rel_100_money/1000,
nonrel_1_money=nonrel_1_money/1000,
nonrel_2_money=nonrel_2_money/1000,
nonrel_5_money=nonrel_5_money/1000,
nonrel_10_money=nonrel_10_money/1000,
nonrel_20_money=nonrel_20_money/1000,
nonrel_50_money=nonrel_50_money/1000,
nonrel_100_money=nonrel_100_money/1000)
#long-form this dataframe
og_lng2=df_og2%>%
gather(condition, amount, c(matches("_money"),matches("_time"))
)%>%
separate(condition, c("kin", "soc_dist", "donation"), "_")%>%
spread(kin, amount)%>%
gather(kinship, amount,
rel,nonrel)
#make variables numeric
og_lng %>%
mutate_all(as.numeric)
og_lng2 %>%
mutate_all(as.numeric)
#create table with original median values
med_table=og_lng%>%group_by(age_group,kinship,donation,soc_dist)%>%summarise(med_amnt=median(amount))
#create table of median values with the transformed monetary amounts
med_table2=og_lng2%>%group_by(age_group,kinship,donation,soc_dist)%>%summarise(med_amnt=median(amount))
#make soc_dist variables numeric
med_table <- mutate(med_table, soc_dist = as.numeric(soc_dist))
med_table2 <- mutate(med_table2, soc_dist = as.numeric(soc_dist))
#define dataset
d=med_table2
#create empty vectors to store values
age_group=vector(mode="character",length=0); donation=vector(mode="character",length=0); kinship=vector(mode="character",length=0); V_values=vector(mode="numeric",length=0); k_values=vector(mode="numeric",length=0); RMSE=vector(mode="numeric",length=0);
R_sq=vector(mode="numeric",length=0)
#run for each age group, extract values for donation * kinship conditions
for(i in unique(d$age_group)){
d_money_rel=d%>%filter(age_group==i, donation=="money", kinship=="rel") #-> create temp df to get values from
age_group=c(age_group,i) #-> store the appropriate age group
donation=c(donation, "money") #-> store the appropriate donation
kinship=c(kinship, "rel") #-> store the appropriate kinship
optim_discount_wrapper <- function(x) { #-> define discount wrapper to get V, k, and RMSE values for this                                                      condition
return(data_vs_discount(V = x[1], k = x[2],
N = d_money_rel$soc_dist,
amount = d_money_rel$med_amnt))
}
opt1=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100)) #-> run discount_wrapper
V_values=c(V_values,opt1$par[1]) #-> store resulting V_value
k_values=c(k_values, opt1$par[2]) #-> store resulting k_value
RMSE=c(RMSE, opt1$value) #-> store resulting RMSE value
d_money_rel$pred=discount(V = opt1$par[1], k = opt1$par[2],N = d_money_rel$soc_dist) #-> store predictions in temp                                                                                          dataset
cor1=cor.test(d_money_rel$med_amnt, d_money_rel$pred) #-> run cor.test to get correlation of predictions and data
R_sq=c(R_sq, (cor1$estimate)^2) #-> square the estimate (pearson's R) to get R^2.
d_money_nonrel=d%>%filter(age_group==i, donation=="money", kinship=="nonrel") #-> do all of this for the next donation                                                                               * Kinship condition
age_group=c(age_group,i)
donation=c(donation, "money")
kinship=c(kinship, "nonrel")
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_money_nonrel$soc_dist,
amount = d_money_nonrel$med_amnt))
}
opt2=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
V_values=c(V_values,opt2$par[1])
k_values=c(k_values, opt2$par[2])
RMSE=c(RMSE, opt2$value)
d_money_nonrel$pred=discount(V = opt2$par[1], k = opt2$par[2],N = d_money_nonrel$soc_dist)
cor2=cor.test(d_money_nonrel$med_amnt, d_money_nonrel$pred)
R_sq=c(R_sq, (cor2$estimate)^2)
d_time_rel=d%>%filter(age_group==i, donation=="time", kinship=="rel")
age_group=c(age_group,i)
donation=c(donation, "time")
kinship=c(kinship, "rel")
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_time_rel$soc_dist,
amount = d_time_rel$med_amnt))
}
opt3=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
V_values=c(V_values,opt3$par[1])
k_values=c(k_values, opt3$par[2])
RMSE=c(RMSE, opt3$value)
d_time_rel$pred=discount(V = opt3$par[1], k = opt3$par[2],N = d_time_rel$soc_dist)
cor3=cor.test(d_time_rel$med_amnt, d_time_rel$pred)
R_sq=c(R_sq, (cor3$estimate)^2)
d_time_nonrel=d%>%filter(age_group==i, donation=="time", kinship=="nonrel")
age_group=c(age_group,i)
donation=c(donation, "time")
kinship=c(kinship, "nonrel")
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_time_nonrel$soc_dist,
amount = d_time_nonrel$med_amnt))
}
opt4=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
V_values=c(V_values,opt4$par[1])
k_values=c(k_values, opt4$par[2])
RMSE=c(RMSE, opt4$value)
d_time_nonrel$pred=discount(V = opt4$par[1], k = opt4$par[2],N = d_time_nonrel$soc_dist)
cor4=cor.test(d_time_nonrel$med_amnt, d_time_nonrel$pred)
R_sq=c(R_sq, (cor4$estimate)^2)
}
#Add all vectors to one dataset
med_smry=as.data.frame(cbind(`Age group`=age_group, Donation=donation, Kinship=kinship, V=V_values, k=k_values, `R sqr`=R_sq, RMSE), row.names = F)%>%mutate(V=as.character(V), k=as.character(k), `R sqr`=as.character(`R sqr`), RMSE=as.character(RMSE))%>%mutate(V=as.numeric(V), k=as.numeric(k), `R sqr`=as.numeric(`R sqr`), RMSE=as.numeric(RMSE))
kable(med_smry, digits = 2, align = "c", caption = "Estimated Parameters and Goodness-of-fit Indices of the Hyperbolic Functions, group median values")
#Create the empty dataframe, in which each participant have 4 rows
df2=as.data.frame(cbind(
id=rep(unique(og_lng2$id),4),
age_group=c(),
gender=c(),
education=c(),
income=c(),
important_friends=c(),
important_family=c(),
ethnicity=c(),
kinship=c(),
donation=c(),
k=c(),
AUC=c()
))
#Fill in values for demographics (age, age group, gender, education, income, number of important family and friends)
for (i in unique(df2$id)){
df_sub=filter(df_og2, id==i)
df2[df2$id==i, 'age']=df_sub$age
df2[df2$id==i, 'age_group']=df_sub$age_group
df2[df2$id==i, 'gender']=df_sub$gender
df2[df2$id==i, 'education']=df_sub$education
df2[df2$id==i, 'income']=df_sub$income
df2[df2$id==i, 'important_friends']=df_sub$important_friends
df2[df2$id==i, 'important_family']=df_sub$important_family
df2[df2$id==i, 'ethnicity']=df_sub$ethnicity
}
df2=as.data.frame(cbind(
id=rep(unique(og_lng2$id),4),
age_group=c(),
gender=c(),
education=c(),
income=c(),
important_friends=c(),
important_family=c(),
ethnicity=c(),
kinship=c(),
donation=c(),
k=c(),
AUC=c()
))
#Fill in values for demographics
for (i in unique(df2$id)){
df_sub=filter(df_og2, id==i)
df2[df2$id==i, 'age']=df_sub$age
df2[df2$id==i, 'age_group']=df_sub$age_group
df2[df2$id==i, 'gender']=df_sub$gender
df2[df2$id==i, 'education']=df_sub$education
df2[df2$id==i, 'income']=df_sub$income
df2[df2$id==i, 'important_friends']=df_sub$important_friends
df2[df2$id==i, 'important_family']=df_sub$important_family
df2[df2$id==i, 'ethnicity']=df_sub$ethnicity
}
#for each individual, extract values for donation * kinship conditions
#set variable soc_dist in og_lng2 to be numeric
og_lng2$soc_dist=as.character(og_lng2$soc_dist)
og_lng2$soc_dist=as.numeric(og_lng2$soc_dist)
is.numeric(og_lng2$soc_dist)
#Get length of number of participants (n) as value
n_p=length(unique(df2$id))
#Create 4 temporary df's to store values from each iteration
df2_mr=df2[1:n_p,] #-> for money_relative
df2_mnr=df2[(n_p+1):(n_p*2),] #->for money_nonrelative
df2_tr=df2[(2*n_p+1):(n_p*3),] #->for time_relative
df2_tnr=df2[(3*n_p+1):(n_p*4),] #->for time_nonrel
#run discount wrapper for each subject in 2*2 conditions
for(i in unique(df2$id)){
#money relative
d_mon_rel=og_lng2%>%filter(id==i, donation=="money", kinship=="rel") #-> create temp df to get values from
df2_mr[df2_mr$id==i, 'donation']="money" #-> store the appropriate donation
df2_mr[df2_mr$id==i, 'kinship']="rel" #-> store the appropriate kinship
optim_discount_wrapper <- function(x) { #-> define discount wrapper to get V, k, and RMSE values for this                                                      condition
return(data_vs_discount(V = x[1], k = x[2],
N = d_mon_rel$soc_dist,
amount = d_mon_rel$amount))
}
opt1=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100)) #-> run discount_wrapper
df2_mr[df2_mr$id==i, 'k']=opt1$par[2] #-> store resulting k_value
df2_mr[df2_mr$id==i, 'V']=opt1$par[1] #-> store resulting V_value
# Get AUC value - using WolframAlpha, the integral of this discount function is:
# V/k*ln(abs(1+k*n))+c -> we don't really care about c for AUC.
k=opt1$par[2]
V=opt1$par[1]
#Evaluate for upper bound
up=V/k*log(abs(1+k*100))
lower=V/k*log(abs(1+k*0))
df2_mr[df2_mr$id==i,'AUC']=up-lower
#money nonrelative
d_mon_nonrel=og_lng2%>%filter(id==i, donation=="money", kinship=="nonrel")
df2_mnr[df2_mnr$id==i, 'donation']="money"
df2_mnr[df2_mnr$id==i, 'kinship']="nonrel"
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_mon_nonrel$soc_dist,
amount = d_mon_nonrel$amount))
}
opt2=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
df2_mnr[df2_mnr$id==i, 'k']=opt2$par[2]
df2_mnr[df2_mnr$id==i, 'V']=opt2$par[1]
# Get AUC value
k=opt2$par[2]
V=opt2$par[1]
#Evaluate for upper bound
up=V/k*log(abs(1+k*100))
lower=V/k*log(abs(1+k*0))
df2_mnr[df2_mnr$id==i,'AUC']=up-lower
#time relative
d_time_rel=og_lng2%>%filter(id==i, donation=="time", kinship=="rel")
df2_tr[df2_tr$id==i, 'donation']="time"
df2_tr[df2_tr$id==i, 'kinship']="rel"
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_time_rel$soc_dist,
amount = d_time_rel$amount))
}
opt3=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
df2_tr[df2_tr$id==i, 'k']=opt3$par[2]
df2_tr[df2_tr$id==i, 'V']=opt3$par[1]
# Get AUC value
k=opt3$par[2]
V=opt3$par[1]
#Evaluate for upper bound
up=V/k*log(abs(1+k*100))
lower=V/k*log(abs(1+k*0))
df2_tr[df2_tr$id==i,'AUC']=up-lower
#time nonrelative
d_time_nonrel=og_lng2%>%filter(id==i, donation=="time", kinship=="nonrel")
df2_tnr[df2_tnr$id==i, 'donation']="time"
df2_tnr[df2_tnr$id==i, 'kinship']="nonrel"
optim_discount_wrapper <- function(x) {
return(data_vs_discount(V = x[1], k = x[2],
N = d_time_nonrel$soc_dist,
amount = d_time_nonrel$amount))
}
opt4=optim(c(100, 0.2), optim_discount_wrapper, method = "L-BFGS-B", lower=c(0,0), upper=c(300,100))
df2_tnr[df2_tnr$id==i, 'k']=opt4$par[2]
df2_tnr[df2_tnr$id==i, 'V']=opt4$par[1]
# Get AUC value
k=opt4$par[2]
V=opt4$par[1]
#Evaluate for upper bound
up=V/k*log(abs(1+k*100))
lower=V/k*log(abs(1+k*0))
df2_tnr[df2_tnr$id==i,'AUC']=up-lower
}
#Combine all into one dataframe (df2)
df2=full_join(df2_mr, df2_mnr)%>%full_join(df2_tr)%>%full_join(df2_tnr)
df2_plot_pred=df2
#recode all NaN AUC values as missing data (NA)
for(i in 1:length(df2$id)){
if(is.nan(df2$AUC[i])){df2$AUC[i]=NA}else{df2$AUC[i]=df2$AUC[i]}
}
#Negative or zero AUC or k values (indicating a problem with the fitting process)
df2$AUC=recode(df2$AUC, "lo:0.01=NA")
df2$k=recode(df2$k, "lo:0.01=NA")
#check if AUC is normally distributed
AUc_hist=ggplot(data=df2, aes(x=AUC))+geom_histogram() #-> strong positive skew
logAUC_hist=ggplot(data = df2, aes(x=log(AUC)))+geom_histogram() #-> looks better
#check if k is normally distributed
k_hist=ggplot(data=df2, aes(x=k))+geom_histogram() #-> strong positive skew
log_k_hist=ggplot(data = df2, aes(x=log(k)))+geom_histogram() #-> looks better
#Since Gong et al., used log(AUC) and log(k) for their analysis, I shall do the same
df2$logAUC=log(df2$AUC)
df2$log_k=log(df2$k)
#compute +/- 3 S.D for logAUC and log_k values
logAUC_hi=mean(df2$logAUC, na.rm=T)+(3*sd(df2$logAUC, na.rm = T))
logAUC_lo=mean(df2$logAUC, na.rm=T)-(3*sd(df2$logAUC, na.rm = T))
log_k_hi=mean(df2$log_k, na.rm=T)+(3*sd(df2$logAUC, na.rm = T))
log_k_lo=mean(df2$log_k, na.rm=T)-(3*sd(df2$logAUC, na.rm = T))
#df2=df2%>%filter(k<=(mean(k)+3*sd(k)) & k>=(mean(k)-3*sd(k)) & AUC<=(mean(AUC)+3*sd(AUC))& AUC>=(mean(AUC)-3*sd(AUC))) #-> retain only observations that meet criteria
#recode all observations outside of the +/- 3 S.D range as missing values
df2$logAUC[df2$logAUC<logAUC_lo]=NA
df2$logAUC[df2$logAUC>logAUC_hi]=NA
df2$log_k[df2$log_k<log_k_lo]=NA
df2$log_k[df2$log_k>log_k_hi]=NA
#check that the minimal values are not lower than k and AUC "_low"'s, and maximal not higher than "_high"'s
min(df2$log_k, na.rm = T)<log_k_lo; max(df2$log_k,na.rm = T)>log_k_hi; min(df2$logAUC,na.rm = T)<logAUC_lo; max(df2$logAUC,na.rm = T)>logAUC_hi
#Change id to factor
is.numeric(df2$id) #-> true
df2$id=as.character(df2$id); df2$id=as.factor(df2$id)
is.factor(df2$id)#-> true
summary(df2$age_group); summary(df2$donation); summary(df2$kinship)
# check that predictors are factors and AUC is numeric
is.factor(df2$age_group); is.factor(df2$donation); is.factor(df2$kinship) #-> age_group yes, others no
is.character(df2$donation)#-> true
df2$donation=as.factor(df2$donation); is.factor(df2$donation)
is.character(df2$kinship)#-> true
df2$kinship=as.factor(df2$kinship); is.factor(df2$kinship)
is.numeric(df2$logAUC)#-> True
## Remove all observations of subjects with outliers
na_counts=df2%>%group_by(id)%>%summarise(naAUC_counts=sum(is.na(logAUC)),na_k_counts=sum(is.na(log_k)))%>%ungroup()
for (i in unique(df2$id)){
temp=filter(na_counts, id==i)
df2[df2$id==i, 'naAUC_counts']=temp$naAUC_counts
df2[df2$id==i, 'na_k_counts']=temp$na_k_counts
}
df2_noNA_AUC=df2%>%filter(naAUC_counts==0)
df2_noNA_k=df2%>%filter(na_k_counts==0)
#preparing the datasets for ANOVA by removing missing values (updated to include education and income)
df2_noNA_AUC <- na.omit(df2_noNA_AUC[, c("id", "logAUC", "important_family", "important_friends", "donation", "kinship", "age_group", "gender", "education", "income")])
df2_noNA_k <- na.omit(df2_noNA_k[, c("id", "log_k", "important_family", "important_friends", "donation", "kinship", "age_group", "gender", "education", "income")])
gender_table <- table(df$gender, df$age_group)
barplot(gender_table, beside = TRUE,
legend = c("Male", "Female", "Non-binary"),
main = "Gender x Age", xlab = "Age Group", ylab = "Count")
chisq.test(table(df$gender, df$age_group)) #significantly different
education_table <- table(df$education, df$age_group)
barplot(education_table, beside = TRUE,
legend = c("Middle school", "High school", "Some college", "Bachelor's degree", "Graduate degree"),
main = "Education x Age", xlab = "Age Group", ylab = "Count")
t.test(education ~ age_group, data = df) #not significantly different
income_table <- table(df$income, df$age_group)
barplot(income_table, beside = TRUE,
legend = c("0-30k", "30-60k", "60-90k", "90-120k", "120-150k", "150k+"),
main = "Income x Age", xlab = "Age Group", ylab = "Count")
t.test(income ~ age_group, data = df) #not significantly different
income_table <- table(df$important_friends, df$age_group)
barplot(income_table, beside = TRUE,
main = "Number of important friends x Age", xlab = "Age Group", ylab = "Count")
t.test(important_friends ~ age_group, data = df) #not significantly different
income_table <- table(df$important_family, df$age_group)
barplot(income_table, beside = TRUE,
main = "Number of important family x Age", xlab = "Age Group", ylab = "Count")
t.test(important_family ~ age_group, data = df) #not significantly different
income_table <- table(df$easeM, df$age_group)
barplot(income_table, beside = TRUE,
main = "Ease of earning money x Age", xlab = "Age Group", ylab = "Count")
t.test(easeM ~ age_group, data = df) #not significantly different
income_table <- table(df$easeT, df$age_group)
barplot(income_table, beside = TRUE,
main = "Ease of getting time off x Age", xlab = "Age Group", ylab = "Count")
t.test(easeT ~ age_group, data = df) #not significantly different
t.test(easeT ~ as.numeric(df$age_group), data = df) #not significantly different
df$easeM <- as.numeric(df$easeM)
df$easeT <- as.numeric(df$easeT)
df$MorT <- as.numeric(df$MorT)
income_table <- table(df$easeT, df$age_group)
barplot(income_table, beside = TRUE,
main = "Ease of getting time off x Age", xlab = "Age Group", ylab = "Count")
t.test(easeT ~ age_group, data = df) #not significantly different
View(df2_noNA_AUC)
df2_over55_AUC <- subset(df2_noNA_AUC, (age_group == "older") & (age > 55))
df_over55_AUC <- left_join(df_noNA_AUC, df %>% select(id, age), by = "id")
df2_over55_AUC <- left_join(df2_noNA_AUC, df %>% select(id, age), by = "id")
sqrt(154(155)*0.05/(1-0.05))
#set data to create similar median amounts plots to the one appearing in the original paper
med_table_plot=med_table2%>%unite('Age-Kinship', c('age_group', 'kinship'), sep=" - ")
ggplot(data = med_table_plot, aes(x = soc_dist, y = med_amnt, color = `Age-Kinship`)) +
geom_point(position = "dodge", aes(shape = `Age-Kinship`)) +
geom_smooth(method = "nls", formula = y ~ a / (b + x),
method.args = list(start = c(a = 100, b = 10)),
se = FALSE, linewidth = 0.5) +
ylim(0, 100) +
facet_grid(donation ~ ., labeller = labeller(donation = c("money" = "Money (x $1000 USD)", "time" = "Time (x days)"))) +
xlab("Closeness") +
ylab("Median amount donated") +
ggthemes::theme_few()
library(knitr)
library(tidyverse)
library(ggplot2)
library(car)
library(ez)
library(broom)
library(pander)
library(kableExtra)
library(lme4)
library(lmerTest)
library(effsize)
library(RColorBrewer)
library(grid)
library(gridExtra)
library(imager)
library(metafor)
theme_set(theme_bw())
discount <- function (V, k, N) {
nu <- V / (1 + k * N)
return(nu)
}
data_vs_discount <- function(V, k, N, amount) {
nu <- discount(V, k, N)
RMSE <- sqrt(mean((amount - nu)^2))
return(RMSE)
}
df = read.csv("psych251_final_data.csv", header=T)
df <- tail(df, -2)
View(df)
df = select(df, -3:-14, -56)
df$id <- 1:182 #changed to reflect final number of participants
df = filter(df, attention_check==5)
df = filter(df, gender_5_TEXT!="I AM YOUR TA PLEASE EXCLUDE ME")
df <- df %>%
mutate(StartDate = as.POSIXct(StartDate, format = "%Y-%m-%d %H:%M:%S")) %>%
filter(StartDate >= as.POSIXct("2023-12-07 15:57:46", format = "%Y-%m-%d %H:%M:%S")) #filtering out pilot participants
df <- df %>% filter(ethnicity ==2)
df = read.csv("psych251_final_data.csv", header=T)
df <- tail(df, -2)
df = select(df, -3:-14, -56)
df$id <- 1:182 #changed to reflect final number of participants
df = filter(df, attention_check==5)
df = filter(df, gender_5_TEXT!="I AM YOUR TA PLEASE EXCLUDE ME")
